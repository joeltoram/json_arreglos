{"version":3,"sources":["arreglos.js"],"names":["mixedTypedArray","salad","Array","element","array","index","len","salad3","length","salad4","push","salad5","salad6","console","pop","ensalada","shift","ensalada1Copy","ensalada1","slice","isArray","tomate","hongo","zanahoria","log"],"mappings":"aAAA,IAAMA,gBAAkB,CAAC,KAAK,EAAM,eAAgB,IAA9CA,MAAAA,CAAAA,KAAe,KAAG,KAAA,KAAY,KAAA,KAAgB,MAE9CC,OAAS,IAAMC,MAAM,KAAM,KAAM,KAAM,KAAM,KAAnD,KAAA,MAGMC,QAAUC,MAAMC,OAGhBC,OAAMC,CAAM,KAACC,KAAnB,KAAA,KAAA,KAAA,KAAA,MACMF,IAAIC,OAAOC,OAAjBD,OAAOD,IAAM,GACbC,OAAOD,IAAM,GAKbG,IAAMA,OAAM,CAAZ,KAEA,KAAA,KAAA,KAAA,KAAA,KAAA,MAFAA,OAAOC,KAAK,MAGZ,IAAMC,OAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIpDA,OAAMC,QAAU,MAGhBC,IAAAA,OAAYD,CAAAA,KAAS,KAAA,KAAA,KAAA,KAAA,KAAA,MAErBA,OAAAE,MAEAD,QAAME,IAAQH,QAKd,IAAAG,SAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAJAd,MAAMe,QAMNH,QAAMI,IAAAA,UAINC,IAAAA,UAAcD,CAAAA,KAAAA,KAAe,KAAA,KAAA,KAAA,KAAA,MAG7BA,cAAAC,UAAAC,QACAjB,QAAMkB,IAAAA,eAEQlB,MAAoBkB,QAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,OADlClB,MAAMkB,QAAQ,MAEdlB,MAAMkB,QAAQ,CAAdC,OAAmB,OAEnBnB,MAAAkB,QAAA,QACaE,OAAqB,KAAMA,MAAA,KAApBC,UAA0B,KAE9CV,QAAQW,IAAIH,OAAQC,MAAOC","file":"arreglos.min.js","sourcesContent":["const mixedTypedArray = [100, true, 'freeCodeCamp', {}];\r\n\r\nconst salad = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\nconst salad2 = new Array('🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑');\r\n\r\nconst element = array[index];\r\n\r\nconst salad3 = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\nconst len = salad3.length;\r\nsalad3[len - 1]; // '🥑'\r\nsalad3[len - 3]; // '🌽'\r\n\r\n\r\n//Añadir un elemento al final del arreglo\r\nconst salad4 = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\nsalad4.push('🥜');\r\n\r\n//Añadir un elemeto al princio del arreglo\r\nconst salad5 = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\nsalad5.unshift('🥜');\r\n\r\n//Eliminar un elemento del arreglo al final\r\nconst salad6 = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\nsalad6.pop(); // 🥑\r\n\r\nconsole.log(salad6); // ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕']\r\n\r\n//ELiminar un elemento al princio del arreglo\r\n\r\nconst ensalada = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\nsalad.shift(); // 🍅\r\n\r\nconsole.log(ensalada); // ['🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\n\r\n//Clonar un arreglo:\r\nconst ensalada1 = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];\r\nconst ensalada1Copy = ensalada1.slice();\r\n\r\nconsole.log(ensalada1Copy); // ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑']\r\n\r\nensalada1 === ensalada1Copy; // returns false\r\n\r\n\r\n//Determinar si el valor es un arreglo\r\nArray.isArray(['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑']); // returns true\r\nArray.isArray('🍅'); // returns false\r\nArray.isArray({ 'tomate': '🍅'}); // returns false\r\nArray.isArray([]); // returns true\r\n\r\n//Destructuración de arreglos\r\nlet [tomate, hongo, zanahoria] = ['🍅', '🍄', '🥕'];\r\n\r\nconsole.log(tomate, hongo, zanahoria); // Output, 🍅 🍄 🥕\r\n\r\n\r\n\r\n"]}